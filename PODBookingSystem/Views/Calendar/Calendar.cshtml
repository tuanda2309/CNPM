@model PODBookingSystem.ViewModels.CalendarViewModel

@{
    Layout = null;
}
<!doctype html>
<html lang="vi">
<head>
    <meta charset="utf-8">
    <title>@Model.Name - POD BOOKING</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/x-icon" href="~/img/logo.ico">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="stylesheet" href="~/css/calendar.css">
</head>
<body>
    <header>
        <div class="container">
            <div class="logoArea">
                <a href="@Url.Action("Index", "Home")" class="image"><img src="~/img/logo2.png"></a>
                <a href="@Url.Action("Index", "Home")" class="siteName">
                    <h1><span class="highlight">POD</span> BOOKING</h1>
                </a>
            </div>
        </div>
    </header>

    <!-- Ph·∫ßn ƒëi·ªÅu h∆∞·ªõng cho l·ªãch -->
    <div class="schedule-navigation">
        <button onclick="changeWeek(-1)">&#9664; Trang tr∆∞·ªõc</button>
        <button onclick="changeWeek(1)">Trang ti·∫øp &#9654;</button>
    </div>

    <!-- Tr∆∞·ªùng nh·∫≠p ng√†y mong mu·ªën -->
    <div class="date-navigation">
        <label for="desiredDate">Nh·∫≠p ng√†y mong mu·ªën:</label>
        <input type="date" id="desiredDate" />
        <button onclick="goToDesiredDate()">ƒêi ƒë·∫øn ng√†y</button>
    </div>

    <!-- L·ªãch -->
    <div class="schedule" id="schedule"></div>

    <footer>
        
    </footer>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        let currentDate = new Date();

        // Render l·ªãch
        function renderSchedule() {
            const schedule = document.getElementById("schedule");

            // L·∫•y ng√†y ƒë·∫ßu tu·∫ßn
            const startOfWeek = new Date(currentDate);
            const dayOffset = (startOfWeek.getDay() === 0) ? -6 : -(startOfWeek.getDay() - 1);
            startOfWeek.setDate(startOfWeek.getDate() + dayOffset);

            // D·ªØ li·ªáu booking t·ª´ Model
            const bookings = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Bookings));

            // T·∫°o c√°c ti√™u ƒë·ªÅ (Th·ª© + Ng√†y)
            const headers = Array.from({ length: 7 }, (_, i) => {
                const date = new Date(startOfWeek);
                date.setDate(startOfWeek.getDate() + i);
                return `
                                    <div class="cell header">
                                        ${i === 6 ? 'Ch·ªß nh·∫≠t' : `Th·ª© ${i + 2}`}<br>
                                        <span style="font-size: 14px; font-weight: normal; color: #555;">
                                            ${date.toLocaleDateString('vi-VN')}
                                        </span>
                                    </div>
                                `;
            }).join('');

            // Render l·ªãch (hi·ªÉn th·ªã c√°c booking theo ng√†y)
            schedule.innerHTML = `
                                <div class="row">
                                    ${headers}
                                </div>
                                <div class="row">
                                    ${Array.from({ length: 7 }, (_, i) => {
                const date = new Date(startOfWeek);
                date.setDate(startOfWeek.getDate() + i);

                // L·ªçc c√°c booking c√≥ trong ng√†y hi·ªán t·∫°i
                const dailyBookings = bookings.filter(b => {
                    const startTime = new Date(b.StartTime);
                    const endTime = new Date(b.EndTime);

                    // Chu·∫©n h√≥a ng√†y
                    const currentDateStart = new Date(date);
                    currentDateStart.setHours(0, 0, 0, 0);

                    const currentDateEnd = new Date(date);
                    currentDateEnd.setHours(23, 59, 59, 999);

                    // Ki·ªÉm tra xem booking n·∫±m trong ng√†y hi·ªán t·∫°i
                    return (
                        currentDateStart <= endTime && currentDateEnd >= startTime && b.Status === "Confirmed"
                    );
                });

                return `
                                    <div class="cell content">
                                        ${dailyBookings.map(b => `
                                            <div class="booking-item">
                                                üïí ${new Date(b.StartTime).toLocaleTimeString('vi-VN')} - ${new Date(b.EndTime).toLocaleTimeString('vi-VN')}<br>
                                                üìç Ph√≤ng: ${b.RoomName}<br>
                                                üë§ Kh√°ch: ${b.CustomerName}
                                            </div>
                                        `).join('')}
                                    </div>
                                `;
            }).join('')}
                                </div>
                            `;
        }

        // Thay ƒë·ªïi tu·∫ßn
        function changeWeek(direction) {
            currentDate.setDate(currentDate.getDate() + direction * 7);
            renderSchedule();
        }

        // Chuy·ªÉn ƒë·∫øn ng√†y mong mu·ªën
        function goToDesiredDate() {
            const desiredDateInput = document.getElementById("desiredDate").value;
            if (desiredDateInput) {
                currentDate = new Date(desiredDateInput);
                renderSchedule();
            } else {
                alert("Vui l√≤ng nh·∫≠p ng√†y h·ª£p l·ªá.");
            }
        }

        // Kh·ªüi t·∫°o l·ªãch khi t·∫£i trang
        document.addEventListener("DOMContentLoaded", () => {
            renderSchedule();
        });
    </script>

</body>
</html>